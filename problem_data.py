import random
from problem import *

class problem_data():
    def __init__(self, nbreInstall, nbreClients):
        self.nbreInstall = nbreInstall
        self.nbreClients = nbreClients
        self.Demande, self.Capacity, self.CoutAffect, self.CoutOuvert, self.B, self.searchSpace = self.GenerateProbParam(nbreInstall, nbreClients)
        self.num_execution_obj_func = 0

        self.pop  = [
    [3, 2, 3, 1, 2, 2, 0, 1, 0, 0, 3, 2, 3, 0, 2, 1, 1, 2, 2, 1, 1, 2, 2, 3, 1, 3, 2, 3, 3, 2],
    [1, 2, 1, 1, 2, 1, 2, 3, 0, 2, 1, 2, 0, 0, 0, 3, 1, 2, 3, 1, 3, 2, 3, 2, 2, 1, 1, 2, 3, 3],
    [3, 3, 3, 0, 1, 3, 3, 3, 2, 3, 1, 1, 1, 1, 3, 1, 3, 3, 3, 2, 3, 1, 2, 3, 2, 1, 2, 3, 1, 1],
    [0, 0, 1, 2, 3, 2, 2, 0, 3, 3, 2, 3, 0, 0, 0, 3, 1, 3, 2, 3, 2, 2, 3, 1, 2, 3, 1, 2, 1, 1],
    [1, 0, 3, 2, 3, 3, 0, 1, 3, 0, 0, 2, 1, 0, 3, 3, 1, 2, 3, 3, 1, 1, 2, 1, 3, 1, 2, 1, 1, 3],
    [3, 3, 0, 2, 2, 1, 3, 2, 2, 2, 2, 1, 3, 0, 0, 1, 2, 1, 1, 1, 3, 3, 1, 1, 1, 3, 2, 3, 1, 1],
    [2, 2, 1, 3, 1, 1, 3, 3, 1, 3, 2, 2, 3, 2, 0, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 3, 2, 2, 1],
    [0, 2, 2, 2, 1, 1, 2, 3, 1, 1, 2, 0, 1, 0, 1, 3, 3, 3, 1, 3, 2, 3, 2, 1, 3, 3, 2, 2, 2, 3],
    [1, 1, 1, 2, 1, 0, 0, 0, 1, 2, 0, 3, 1, 1, 2, 2, 1, 1, 3, 3, 2, 3, 3, 1, 1, 2, 2, 3, 2, 3],
    [3, 3, 3, 2, 1, 1, 3, 1, 2, 3, 2, 3, 2, 2, 0, 3, 2, 3, 1, 1, 1, 2, 1, 2, 2, 1, 3, 3, 2, 1],
    [3, 1, 0, 0, 2, 2, 1, 1, 2, 2, 3, 3, 1, 3, 2, 1, 3, 1, 1, 2, 2, 2, 3, 2, 1, 2, 2, 1, 1, 3],
    [2, 2, 1, 2, 2, 2, 2, 0, 1, 1, 0, 3, 2, 2, 2, 3, 2, 3, 2, 2, 1, 3, 3, 1, 3, 1, 2, 2, 1, 2],
    [1, 1, 3, 0, 2, 0, 1, 1, 1, 3, 0, 0, 1, 0, 3, 3, 3, 2, 1, 1, 3, 1, 1, 3, 3, 3, 2, 1, 2, 1],
    [1, 2, 3, 2, 1, 1, 1, 0, 3, 0, 0, 0, 0, 0, 3, 1, 3, 2, 2, 3, 1, 2, 3, 2, 2, 3, 3, 3, 3, 3],
    [1, 3, 0, 3, 2, 3, 1, 1, 2, 1, 3, 2, 0, 2, 3, 2, 2, 2, 3, 3, 1, 1, 2, 3, 1, 1, 3, 2, 1, 2],
    [0, 0, 2, 1, 1, 3, 1, 1, 1, 1, 0, 1, 1, 2, 0, 3, 3, 2, 3, 2, 3, 1, 2, 2, 2, 1, 2, 2, 3, 2],
    [2, 0, 2, 2, 2, 0, 0, 3, 1, 3, 1, 1, 1, 0, 1, 3, 3, 3, 2, 3, 1, 2, 2, 2, 3, 1, 2, 1, 1, 3],
    [3, 1, 2, 3, 0, 1, 0, 3, 1, 0, 2, 0, 1, 1, 2, 3, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3],
    [1, 2, 1, 1, 3, 3, 1, 2, 0, 3, 3, 3, 2, 3, 1, 2, 2, 3, 1, 3, 3, 2, 2, 2, 3, 1, 1, 2, 1, 1],
    [0, 3, 1, 1, 1, 1, 2, 0, 0, 1, 1, 3, 2, 1, 2, 3, 2, 3, 3, 2, 1, 3, 3, 3, 3, 3, 3, 3, 2, 1],
    [0, 3, 2, 3, 2, 1, 3, 3, 0, 0, 0, 3, 0, 1, 0, 1, 3, 3, 1, 2, 1, 2, 1, 3, 2, 3, 3, 3, 3, 1],
    [3, 3, 3, 0, 2, 0, 0, 0, 1, 3, 3, 3, 2, 2, 1, 1, 1, 3, 2, 2, 3, 1, 1, 2, 2, 2, 2, 1, 3, 2],
    [2, 2, 0, 0, 3, 3, 3, 3, 1, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 1, 1],
    [2, 1, 1, 2, 2, 3, 3, 3, 2, 1, 2, 1, 0, 2, 1, 1, 3, 2, 1, 3, 2, 3, 2, 1, 2, 1, 2, 2, 2, 1],
    [1, 1, 3, 2, 2, 0, 3, 3, 0, 2, 2, 0, 0, 3, 2, 1, 2, 2, 3, 2, 2, 2, 1, 3, 2, 3, 3, 2, 1, 1],
    [3, 3, 0, 1, 3, 1, 2, 3, 3, 2, 1, 0, 2, 2, 0, 2, 3, 2, 2, 2, 3, 3, 2, 3, 1, 1, 3, 1, 1, 3],
    [1, 2, 2, 3, 2, 3, 0, 2, 0, 0, 3, 0, 2, 1, 1, 3, 1, 1, 3, 2, 1, 2, 1, 3, 3, 2, 1, 1, 2, 1],
    [1, 1, 0, 2, 3, 1, 2, 0, 3, 1, 3, 2, 0, 3, 0, 1, 2, 1, 2, 1, 3, 2, 1, 1, 3, 2, 3, 1, 3, 3],
    [0, 3, 0, 1, 0, 3, 1, 2, 0, 3, 1, 0, 3, 1, 3, 3, 1, 1, 2, 3, 3, 2, 3, 3, 3, 2, 3, 2, 3, 3],
    [3, 0, 1, 2, 3, 0, 2, 2, 3, 1, 3, 0, 0, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 3, 1, 1, 3, 1, 3, 2],
    [3, 0, 2, 3, 1, 0, 2, 2, 2, 3, 3, 1, 3, 3, 2, 3, 2, 3, 3, 3, 1, 1, 2, 1, 3, 1, 1, 1, 2, 2],
    [1, 2, 3, 2, 0, 1, 0, 3, 0, 0, 3, 1, 2, 3, 0, 1, 3, 1, 3, 3, 1, 2, 2, 2, 3, 2, 2, 1, 3, 2],
    [3, 2, 1, 2, 0, 0, 0, 3, 0, 1, 1, 1, 3, 1, 0, 3, 2, 1, 2, 3, 1, 3, 1, 1, 2, 2, 2, 2, 1, 3],
    [1, 2, 2, 2, 1, 0, 2, 2, 3, 0, 1, 0, 3, 0, 2, 3, 3, 2, 1, 2, 1, 1, 1, 3, 3, 3, 1, 1, 3, 3],
    [3, 1, 1, 1, 1, 2, 1, 0, 0, 2, 0, 2, 1, 2, 2, 2, 3, 3, 3, 3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2],
    [3, 1, 2, 3, 1, 0, 2, 1, 2, 3, 1, 0, 1, 0, 2, 2, 2, 2, 2, 3, 1, 2, 2, 3, 2, 2, 2, 3, 2, 3],
    [3, 0, 3, 2, 2, 3, 1, 0, 3, 2, 3, 0, 3, 3, 2, 3, 3, 1, 1, 3, 1, 2, 3, 3, 1, 3, 2, 1, 2, 1],
    [0, 3, 2, 0, 2, 1, 1, 0, 2, 0, 3, 0, 0, 0, 3, 2, 2, 3, 1, 3, 1, 2, 3, 1, 1, 1, 2, 2, 2, 1],
    [0, 2, 1, 2, 1, 2, 1, 1, 2, 0, 0, 0, 2, 3, 3, 3, 2, 3, 2, 3, 1, 2, 1, 3, 3, 1, 2, 2, 1, 2],
    [0, 0, 0, 1, 0, 0, 2, 1, 0, 2, 2, 2, 0, 2, 1, 1, 3, 1, 3, 2, 2, 1, 1, 3, 1, 3, 1, 3, 2, 3],
    [3, 2, 0, 2, 1, 1, 3, 2, 2, 3, 2, 1, 2, 2, 0, 2, 3, 1, 2, 1, 2, 2, 1, 1, 3, 1, 2, 3, 3, 2],
    [0, 2, 0, 1, 0, 1, 0, 0, 2, 3, 0, 0, 3, 0, 1, 2, 2, 1, 3, 2, 1, 2, 3, 3, 2, 2, 2, 2, 2, 2],
    [0, 0, 2, 1, 2, 0, 3, 0, 0, 1, 2, 0, 1, 3, 0, 3, 2, 3, 1, 1, 1, 2, 2, 3, 2, 2, 2, 3, 1, 1],
    [3, 3, 1, 2, 2, 0, 3, 3, 0, 2, 3, 1, 0, 2, 3, 2, 1, 3, 1, 2, 2, 1, 3, 3, 1, 2, 2, 1, 3, 3],
    [1, 1, 1, 1, 3, 2, 2, 1, 3, 3, 0, 0, 0, 1, 2, 2, 3, 1, 1, 1, 3, 3, 3, 3, 2, 2, 2, 2, 1, 2],
    [2, 1, 1, 1, 0, 1, 0, 3, 0, 1, 1, 1, 2, 2, 3, 2, 3, 3, 2, 2, 2, 2, 2, 3, 1, 1, 3, 2, 3, 1],
    [0, 1, 3, 3, 1, 2, 0, 3, 2, 1, 1, 0, 2, 2, 1, 3, 1, 2, 3, 2, 2, 3, 2, 1, 2, 3, 2, 2, 2, 2],
    [2, 3, 3, 0, 3, 1, 3, 3, 2, 1, 1, 1, 3, 0, 2, 1, 1, 1, 2, 2, 2, 1, 3, 2, 1, 2, 3, 2, 1, 1],
    [2, 0, 1, 1, 3, 3, 3, 0, 0, 0, 2, 2, 1, 3, 1, 2, 1, 1, 1, 2, 2, 2, 2, 3, 2, 1, 3, 3, 2, 1],
    [1, 2, 0, 3, 2, 1, 3, 2, 0, 2, 2, 1, 2, 1, 3, 1, 3, 2, 3, 3, 3, 1, 1, 3, 3, 1, 3, 3, 1, 1]
]
        


    def GenerateProbParam(self, nbrInstall, nbrClients):
        Demande= [random.randint(50, 400) for client in range(nbrClients)]
        Capacity= [random.randint(100, 400) for install in range(nbrInstall)]
        CoutAffect= [[random.randint(100, 800) for install in range(nbrInstall)] for client in range(nbrClients)]
        CoutOuvert= [random.randint(1000, 10000) for install in range(nbrInstall)]
        B= random.randint(50000, 90000)
        searchSpace= [[0,3] for i in range(nbrInstall) ] +   [[1,3]for i in range(nbrClients)]

        return Demande, Capacity, CoutAffect, CoutOuvert, B,searchSpace
    


    def function_evaluation(self,point):
        self.num_execution_obj_func += 1

        problem1= Problem(self.searchSpace, self.nbreInstall, self.nbreClients,self.Demande,  self.Capacity, self.CoutAffect, self.CoutOuvert, self.B)
        return problem1.penalty(point)
    
    def fct_objective(self, point):
        problem1= Problem(self.searchSpace, self.nbreInstall, self.nbreClients,self.Demande,  self.Capacity, self.CoutAffect, self.CoutOuvert, self.B)
        return problem1.fct_obj_prob(point)